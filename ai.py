import tkinter as tk
from tkinter import scrolledtext, ttk, font
import threading
from vosk import Model, KaldiRecognizer
import pyaudio
from llama_cpp import Llama

class StreamText(scrolledtext.ScrolledText):
    """–í–∏–¥–∂–µ—Ç —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º —Ç–µ–∫—Å—Ç–∞"""
    def stream(self, text: str, delay: int = 1):
        self.insert(tk.END, text)
        self.see(tk.END)
        self.update()

class VoiceAssistant:
    def __init__(self, root):
        self.root = root
        self.setup_ui()
        self.setup_audio()
        self.setup_llm()
        self.history = []
        
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.root.title("Mistral AI Assistant")
        self.root.geometry("900x700")
        self.root.configure(bg="#f5f5f5")
        
        # –®—Ä–∏—Ñ—Ç—ã
        self.main_font = font.Font(family="Segoe UI", size=12)
        self.button_font = font.Font(family="Segoe UI", size=11, weight="bold")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
        self.chat_frame = tk.Frame(self.root, bg="#ffffff", bd=2, relief=tk.GROOVE)
        self.chat_frame.pack(pady=15, padx=15, fill=tk.BOTH, expand=True)
        
        self.chat_area = StreamText(
            self.chat_frame, wrap=tk.WORD, width=100, height=30,
            font=self.main_font, bg="#ffffff", fg="#333333",
            padx=10, pady=10
        )
        self.chat_area.pack(fill=tk.BOTH, expand=True)
        
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞
        input_frame = tk.Frame(self.root, bg="#f5f5f5")
        input_frame.pack(fill=tk.X, padx=15, pady=(0, 15))
        
        self.input_entry = tk.Text(
            input_frame, height=4, wrap=tk.WORD,
            font=self.main_font, bg="#ffffff"
        )
        self.input_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        
        # –ö–Ω–æ–ø–∫–∏
        button_frame = tk.Frame(input_frame, bg="#f5f5f5")
        button_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.send_btn = tk.Button(
            button_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å (Ctrl+Enter)", 
            command=self.send_text, bg="#4CAF50", fg="white",
            font=self.button_font, padx=10
        )
        self.send_btn.pack(fill=tk.X, pady=(0, 5))
        
        self.record_btn = tk.Button(
            button_frame, text="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥", 
            command=self.start_recording, bg="#2196F3", fg="white",
            font=self.button_font, padx=10
        )
        self.record_btn.pack(fill=tk.X, pady=5)
        
        self.clear_btn = tk.Button(
            button_frame, text="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç", 
            command=self.clear_chat, bg="#f44336", fg="white",
            font=self.button_font, padx=10
        )
        self.clear_btn.pack(fill=tk.X)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        tk.Label(
            self.root, textvariable=self.status_var, 
            bg="#f5f5f5", font=self.main_font
        ).pack(side=tk.BOTTOM, fill=tk.X, padx=15, pady=5)
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.root.bind("<Control-Return>", lambda e: self.send_text())
        
    def setup_audio(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        self.model_stt = Model("vosk-model-small-ru-0.22")
        self.recognizer = KaldiRecognizer(self.model_stt, 16000)
        self.mic = pyaudio.PyAudio()
        self.stream = self.mic.open(
            format=pyaudio.paInt16,
            channels=1,
            rate=16000,
            input=True,
            frames_per_buffer=8192
        )
    
    def setup_llm(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏"""
        self.llm = Llama(
            model_path="models/mistral-7b-instruct-v0.1.Q4_K_M.gguf",
            n_ctx=4096,
            n_threads=6,
            n_batch=2048,
            n_gpu_layers=0,
            offload_kqv=True,
            verbose=False
        )
    
    def send_text(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        text = self.input_entry.get("1.0", tk.END).strip()
        if not text:
            return
            
        self.input_entry.delete("1.0", tk.END)
        self.chat_area.stream(f"–í—ã: {text}\n\n", delay=0)
        self.history.append({"role": "user", "content": text})
        
        threading.Thread(target=self.generate_response, daemon=True).start()
    
    def start_recording(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        self.status_var.set("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ...")
        self.record_btn.config(state=tk.DISABLED)
        threading.Thread(target=self.record_voice, daemon=True).start()
    
    def record_voice(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞"""
        try:
            while True:
                data = self.stream.read(4096)
                if self.recognizer.AcceptWaveform(data):
                    text = self.recognizer.Result()[14:-3]
                    if text:
                        self.chat_area.stream(f"–í—ã: {text}\n\n")
                        self.history.append({"role": "user", "content": text})
                        self.generate_response(text)
                    break
        finally:
            self.record_btn.config(state=tk.NORMAL)
            self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def generate_response(self, prompt=None):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ—Ç–æ–∫–æ–≤—ã–º –≤—ã–≤–æ–¥–æ–º"""
        self.status_var.set("ü§ñ Mistral –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç...")
        self.root.config(cursor="watch")
        
        try:
            full_response = ""
            for chunk in self.llm.create_chat_completion(
                messages=self.history[-10:],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
                max_tokens=1024,
                temperature=0.7,
                stream=True
            ):
                delta = chunk["choices"][0]["delta"]
                if "content" in delta:
                    full_response += delta["content"]
                    self.chat_area.stream(delta["content"])
            
            self.history.append({"role": "assistant", "content": full_response})
            self.chat_area.stream("\n\n")
            
        finally:
            self.status_var.set("‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            self.root.config(cursor="")
    
    def clear_chat(self):
        """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
        self.chat_area.delete("1.0", tk.END)
        self.history = []

if __name__ == "__main__":
    root = tk.Tk()
    app = VoiceAssistant(root)
    root.mainloop()